---
import { FaGithub } from 'react-icons/fa'
import ExternalLink from '@components/ui/links/ExernalLink.astro'
import type { BreadcrumbItems } from '@components/ui/breadcrumbs/breadcrumb.types'
import DetailLayout from '@layouts/DetailLayout.astro'
import { ProjectController } from '@libs/controllers/project'
import convertDate from '@libs/utils/convertDate'

export async function getStaticPaths() {
  const projects = await ProjectController.getProjects()

  if (!projects) {
    return {
      redirect: '/500',
    }
  }

  return projects.map((project) => ({
    params: { slug: project.slug },
  }))
}

const { slug } = Astro.params

const project = await ProjectController.getProject(slug)

if (!project) {
  return {
    notFound: true,
  }
}

const breadcrumbItems: BreadcrumbItems = [
  { title: 'Home', path: '/' },
  { title: 'Projects', path: `/projects` },
]

const startingDate = convertDate(project.startingDate)
const endDate = project.endDate ? convertDate(project.endDate) : 'Present'
---

<DetailLayout
  title={`${project.name} | Projects`}
  description={project.description}
  currentPath={`/blog/${slug}`}
  breadcrumbItems={breadcrumbItems}
>
  <h1 class="mb-4 text-center md:text-left md:leading-none md:text-5xl">
    {project.name}
  </h1>
  {project.company && <p>{project.company}</p>}
  {
    project.image && (
      <img
        class="rounded-2xl"
        src={project.image.derived[0].secure_url}
        alt={`Cover Image for ${project.name}`}
        width="100%"
        height="620"
      />
    )
  }
  <div class="flex space-x-1">
    <span>{startingDate}</span>
    <span>-</span>
    <span>{endDate}</span>
  </div>
  {
    project.url && (
      <ExternalLink title="Visit website" href={project.url} withIcon>
        <span>Visit</span>
      </ExternalLink>
    )
  }
  {
    project.sourceCode && (
      <ExternalLink title="View source code" href={project.sourceCode}>
        <FaGithub className="text-xl text-black dark:text-white" />
        <span>Source code</span>
      </ExternalLink>
    )
  }
  {
    project.overview && (
      <div>
        <p class="break-words">{project.overview}</p>
      </div>
    )
  }
  {
    project.role && (
      <div>
        <h5>Role</h5>
        <p>{project.role}</p>
      </div>
    )
  }
  {
    project.responsibility && project.responsibility.length > 0 && (
      <div>
        <h5>What I do</h5>
        <ul class="ml-5 list-disc">
          {project.responsibility.map((value) => {
            return <li class="break-words">{value}</li>
          })}
        </ul>
      </div>
    )
  }
  <h5>Tech Stack</h5>
  <ul class="ml-5 list-disc">
    {
      project.techStack.map((stack) => {
        return <li>{stack}</li>
      })
    }
  </ul>
</DetailLayout>
