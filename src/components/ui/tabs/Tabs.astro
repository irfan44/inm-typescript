---
import type { TabsItems } from './tabs.types'

interface Props {
  tabs: TabsItems
  defaultTab?: string
  additionalClass?: string
}

const { tabs, defaultTab = tabs[0]?.id, additionalClass = '' } = Astro.props
---

<div data-tabs>
  <div class={additionalClass}>
    <div
      class="flex w-fit items-center gap-2 rounded-full border border-neutral-200 bg-secondary p-1 text-sm dark:border-neutral-700 dark:bg-neutral-800"
      role="tablist"
    >
      {
        tabs.map((tab) => {
          if (tab.href) {
            return (
              <a
                class:list={[
                  'flex items-center justify-center whitespace-nowrap rounded-full px-3 py-1 text-center transition-all duration-200',
                  {
                    'bg-white font-bold dark:bg-neutral-900': tab.id === defaultTab,
                    'bg-transparent font-normal': tab.id !== defaultTab,
                  },
                ]}
                role="tab"
                aria-selected={tab.id === defaultTab}
                aria-controls={`panel-${tab.id}`}
                data-tab={tab.id}
                href={tab.href}
              >
                {tab.label}
              </a>
            )
          }
          return (
            <button
              class:list={[
                'flex items-center justify-center whitespace-nowrap rounded-full px-3 py-1 text-center transition-all duration-200',
                {
                  'bg-white font-bold dark:bg-neutral-900': tab.id === defaultTab,
                  'bg-transparent font-normal': tab.id !== defaultTab,
                },
              ]}
              role="tab"
              aria-selected={tab.id === defaultTab}
              aria-controls={`panel-${tab.id}`}
              data-tab={tab.id}
              type="button"
            >
              {tab.label}
            </button>
          )
        })
      }
    </div>
  </div>
  <div class="mt-4">
    <slot />
  </div>
</div>

<script>
  function switchTab(tabId: string, tabsContainer: HTMLElement) {
    const buttons = tabsContainer.querySelectorAll('[role="tab"]')
    const panels = tabsContainer.querySelectorAll('[role="tabpanel"]')

    buttons.forEach((btn) => {
      const isActive = btn.getAttribute('data-tab') === tabId
      btn.setAttribute('aria-selected', isActive.toString())
      btn.classList.toggle('font-bold', isActive)
      btn.classList.toggle('dark:bg-neutral-900', isActive)
      btn.classList.toggle('bg-white', isActive)
      btn.classList.toggle('font-normal', !isActive)
      btn.classList.toggle('bg-transparent', !isActive)
    })

    panels.forEach((panel) => {
      const isPanelActive = panel.id === `panel-${tabId}`
      panel.classList.toggle('hidden', !isPanelActive)
      panel.classList.toggle('block', isPanelActive)
    })
  }

  function initTabs() {
    const tabsContainers = document.querySelectorAll('[data-tabs]')

    tabsContainers.forEach((container) => {
      const buttons = container.querySelectorAll('[role="tab"]')

      buttons.forEach((button) => {
        button.addEventListener('click', () => {
          const tabId = button.getAttribute('data-tab')
          if (tabId) {
            switchTab(tabId, container as HTMLElement)
          }
        })
      })
    })
  }

  initTabs()

  document.addEventListener('astro:page-load', initTabs)
</script>
